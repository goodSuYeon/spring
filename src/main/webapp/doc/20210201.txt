<앞으로 테스트 코드 작성방법>
Controller - (1). WebTestConfig 클래스를 상속 받는 junit 클래스를 생성
   			 (2). mockMVC 객체를 이용해서 테스트 코드를 작성
Service, repository - (1). ModelTestConfig 클래스를 상속 받는 junit클래스를 생성
				      (2). 테스트 대상 스프링 bean을 주입받아 테스트 코드를 작성
				      
				      				      
<Login 기능 마이그레이션 예제>
기존 웹브라우저 요청 : localhost/login.jsp   → model1방식   
                 (여기서 요청을 서블릿이 받는다면  → model2방식)

1. 로그인 화면 요청
   .jsp 위치 (webapp/… -> webapp/WEB/INF/views) 보안상  
  	      (commons/header.js, left.jsp, common_lib.jsp)
	      webapp/login.jsp           -> webapp/WEB/INF/views/login.jsp 로 위치설정
	      webapp/common/*.jsp  -> webapp/WEB/INF/views/common/*.jsp 로 위치설정

2. 로그인 화면 요청처리 Controller ->    Spring작업
   (1). kr.or.ddit.login.LoginController 생성
   (2). @Controller등록
   (3). @RequestMapping -> class? method?
        기존 : @WebServlet("/loginController")
        변경 : login/view  -> localhost/login/view
   (4). method 구현 -> 해당 요청 처리하기 위해 파라미터가 필요한가? 
   					  (req.getRequestDispatcher("/login.jsp").forward(req, resp); 를 할것이라서 파라미터 필요없음)
   	                
   	                요청 위임(servlet)
   	                - req.getRequestDispatcher("/login.jsp").forward(req, resp);
   	                
   	                요청위임(Spring)
   	                - 메소드 반환 문자열(view name)
   	                  /WEB-INF/views/ + 메서드 반환 view name + .jsp
   	                  ->/WEB-INF/views/login.jsp    (즉, login을 리턴하면됨!)
   (5). Test코드 구현하기
   
<Controller 테스트 코드 구현시, 사용하는 메서드>
 - .perform 
   ㄴ get(), post(), fileUpload()
     param("파라미터명", "파라미터값")
 - .andExpect
   ㄴ status(), model(), view()
 - .andReturn()   -> MvcResult객체를 반환함
		             ModelAndView mav = mvcResult.getModelAndView();
 
 - .andDO()       -> 부가적인 작업(결과출력)
   ㄴ status(), model(), view

<파라미터를 >
 1. userVo 준비 (작성하지 않은 필드 추가)
 2. webapp/main.jsp -> webapp/WEB-INF/views/main.jsp 로 복사
 3. 요청처리 로직 작성(메서드)
     (1). 기존방식 : request.getParameter(“userid”)
	    ①  파라미터가 몇개 없어서 value object를 사용하지 않는 경우
	       스프링 컨트롤러 메서드에 파라미터와 동일한 이름의 인자를 선언함
	       스프링 MVC모듈에서 request객체의 파라미터를 메서드 인자로 자동 바인딩함 

        ② 파라미터를 담을 value object가 있는 경우
	      value object를 스프리 메서드인자로 선언
          파라미터 이름과 value objcet필드의 이름이 동일한 경우 자동으로 바인딩함

     (2). 로그인 성공시
         세션객체에 S_USER속성으로 사용자정보를 vo객체에 저장함
         기존방식: HttpSession session = request.getSession();
                session.setAttribute(“S_USER”, userVo);
         ->스프링 컨트롤러 메서드에 추가할 수 있는 인자타입
           servlet api : HttpServletRequest, HttpServletResponse, HttpSession
           		         application ==> getServletContext() 

     (3). 로그인 실패시
          login.jsp로 Redirect
          기존방식: resopnse.sendRedirect(“/login.jsp”); 
          
          
  	                