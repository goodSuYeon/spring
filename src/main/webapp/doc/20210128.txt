- web.xml에 Dependency 추가한다. ( 버전은 4.3.30.RELEASE )
   spring-context
   spring-core
   spring-web
   spring-beans
   spring-webmvc
   spring-test
   spring-jdbc

   junit - test
   jp
 
<스프링 bean객체를 주입 받을 수 있는 조건>
 - 주입을 받는 객체로 스프링 bean으로 등록이 되어 있어야 한다.
   (즉, 스프링 컨테이너에서 관리가 되는 객체여야 한다.)
 (ex) userService객체에 userDao 스프링 bean을 주입(DI)하려면 userService객체도 스프링     
      bean이어야 한다.
    
      userService객체가 스프링 bean이 아니지만 스프링컨테이너객체를 참조 하고 있으면
      DL은 가능하다.
<DI(주입) 방식>
1. Setter 주입   - setter메소드가 존재 (xml, java 설정파일)
2. 생성자 주입     - 주입받으려는 bean을 인자로 하는 생성자가 존재 (xml, java 설정파일)
3. 어노테이션 주입 - @Resource , @Autowired, @Inject (xml, java에서 설정가능하나, 잘 드러나지는 않음) ★
  . . .
      
<scope>
  - bean의 속성, 싱글톤(default) , prototype이 존재
 디자인 패턴 - singleton : 특정 클래스의 인스턴스가 메모리상에서 하나만 존재하도록 하는 패턴 
 스프링     - singleton : id당 하나의 객체를 만든다, bean 엘레멘트 를 선언시 중복된 class를 사용 가능
동일한 클래스의 객체가 스프링 컨테이너 상에서 여러개 존재하는 것이 가능하다
 
 
<ref, value-ref>
  - 스프링 bean을 주입할 때 사용하는 속성으로,
   	해당 속성에 들어오는 문자열은 스프링 bean의 이름(id)이어야 함

<bean앨레맨트를 대체할 수 있는 방법>
기존 : 스프링 bean을 하나씩 선언
	  <bean .... * 선언 하려는 갯수만큼
개선 : component-scan 이용
	  웹에서 자주 사용하는 모듈(레이얼) - controller, service, repository(dao)
	  1. 구현 클래스에 어노테이션을 적용 (@Controller, @Service, @Repository)
	  2. component-scan 엘레멘트를 xml에 선언
	     => 특정 패키지 밑에 등록된 클래스를 스캔
	        @Controller, @Service, @Repository 어노테이션이 붙은 클래스들을 스프링 bean으로 등록
	         	  