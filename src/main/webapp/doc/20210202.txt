<사용자 페이징 처리>
 - 페이징 처리를 위해 필요한 값
  (1). 정렬기준 - userid
  (2). 페이지 사이즈
  (3). 페이지
  
 - user/pagingUser 
  -> 페이지, 페이지 사이즈 파라미터를 보내지 않음
  -> 페이지, 페이지 사이즈 파라미터가 없을 경우 - servlet 기본 값 처리를함
  
  PageVo pageVo = new PageVo(page, pageSize);
  
  public Strng pagingUser(int page, int pageSize);
  
 < @RequestParam >
  - 메소드 인자에서 사용가능한 어노테이션이다.

  1. 바인딩 될 파라미터 설정(name)
     - 파라미터명과 메서드 인자명이 다를 경우 / 자동바인딩이 되지 않는 문제를 해결
     - 파라미터명을 명시함으로써 메서드 인자에 자동 바인딩 될 수 있도록 설정
  2. 파라미터가 존재하지 않을 경우 기본 값 설정(defaultValue)
     - 파라미터가 존재하지 않을 경우 / 메서드 인자를 primitive type으로 선언한 경우 에러 발생
         -> defaultValue 설정으로 에러방지 가능
  3. 파라미터 존재 여부 설정(required , 기본값을 true)
     - 파라미터가 반드시 필요한지 여부를 설정
        (단, defaultValue 설정 시, 자동으로 false로 설정됨)
  
  
< @ModelAttribute >    -- 사용빈도가 많지는 않음!!
 1. 메소드
  - @RequestMapping 어노테이션이 붙은 메서드가 실행되기 전에 먼저 실행되고, 
  	해당 메서드가 리턴하는 값을 Model객체에 넣어준다
  
    @ModelAttribute
    public List<String> rangers(){
    	 ....
    	 return list;
    }
    
    @RequestMapping("list")
    public String view(Model model){
    	return view;
    }
    
    localhost/user/list -> rangers() -> model -> list
    localhost/user/list2 -> rangers() -> model -> list2
    
    @Before -> @Test
    @Before -> @Test
    @Before -> @Test
     
 1. 파라미터 인자
  - Model객체에 저장된 속성을 파라미터 인자에 바인딩 가능
  
  - 'command객체'의 경우 / @ModelAttribute 어노테이션을 적용하지 않더라도,
    model갹체에 자동으로 등록이된다.
    
< @SessionAttribute >
  - class에 적용한다.
  - @ModelAttribute가 적용된 메서드가 
    @RequestMapping이 적용된 메서드 실행 전 항상 호출되는 부하를 줄이는 것이 목적이다.
  - 최초 1회에 대해서는 @ModelAttribute가 적용된 메서드를 호출하여 해당 속성값을 세션에 적용한다
    이후, 호출에 대해서는 session에 저장된 값을 사용하여 
         @ModelAttribute 메서드가 적용된 로직이 반복 호출 되는 것을 방지 --> 캐시
         
< @PathVariable > 
  - URI의 일부를 메서드 인자로 바인딩한다.
  (1). @RequestMapping path 설정 시, 어떤부분을 가져올지 표현해줘야함
       -> @RequestMapping("hello/{path}")
  (2). 메서드 인자에 @PathVariable을 통해 가져올 값을 바인딩함
       -> public String view(@PathVariable("path") String path){
       } 
       
< @RequestParam > 
  - 파라미터 정보를       
< @RequestHeader >            
  - Header정보를 메서드 인자로 바인딩한다.

< 파일 업로드 >
 1. 서블릿
   - form 태그 enctype="multipart/form-data" 
   - form 태그 method="post"
   - <input type="file" />
   - @Multipart
   - 파일정보 : Part part = request.getPart();
   
 2. Spring
   - form태그 enctype="multipart/form-data"
   - form태그 method="post"
   - <input type="file" />
   - ★multipartResolver라는 스프링 bean 등록 CommonsMultipartResolver★
     id="multipartResolver" 스프링에서 강제함
   - 파일정보 : MultipartFile 인터페이스 
     
   - 부모
     자식 (application-context.xml)

<복수 파라미터 전송>
 - 메서드 인자로 List -> X  
   (ex) List<String> 이런식으로 하면 바인딩이 안됨!
 - 메서드 인자로 배열  -> O
   (ex) String[] 